{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Router from 'next/router';\nimport StripeCheckout from 'react-stripe-checkout';\nimport useRequest from '../../hooks/use-request';\n\nvar OrderShow = function OrderShow(_ref) {\n  var currentUser = _ref.currentUser,\n      order = _ref.order;\n\n  var _useState = useState(''),\n      timeLeft = _useState[0],\n      setTimeLeft = _useState[1];\n\n  var _useRequest = useRequest({\n    url: '/api/payments',\n    method: 'post',\n    body: {\n      orderId: order.id\n    },\n    onSuccess: function onSuccess(payment) {\n      return Router.push('/orders');\n    }\n  }),\n      doRequest = _useRequest.doRequest,\n      errors = _useRequest.errors;\n\n  useEffect(function () {\n    var findTimeLeft = function findTimeLeft() {\n      var msLeft = new Date(order.expiresAt) - new Date();\n      setTimeLeft(Math.round(msLeft / 1000));\n    };\n\n    findTimeLeft();\n    var timerId = setInterval(findTimeLeft, 1000);\n    return function () {\n      clearInterval(timerId);\n    };\n  }, [order]);\n\n  if (timeLeft < 0) {\n    return __jsx(\"div\", null, \"Order expired\");\n  }\n\n  return __jsx(\"div\", null, __jsx(\"h1\", null, \"Order Details\"), __jsx(\"h3\", null, \"Time left to pay: \", timeLeft, \" seconds\"), __jsx(StripeCheckout, {\n    token: function token(_ref2) {\n      var id = _ref2.id;\n      return doRequest({\n        token: id\n      });\n    },\n    stripeKey: \"pk_test_51GsteSK6lfEXMYmEZNoenKzeABT2L5d9bCZOALjqYSlUIM05H9fS2X2YU2kleRLr2YuJAailDCjzhnAVhyDVDkOZ00HZFQ7Czn\",\n    amount: order.ticket.price * 100,\n    email: currentUser.email\n  }), errors);\n};\n\nOrderShow.getInitialProps = function _callee(context, client) {\n  var orderId, _await$client$get, data;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          orderId = context.query.orderId;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(client.get(\"/api/orders/\".concat(orderId)));\n\n        case 3:\n          _await$client$get = _context.sent;\n          data = _await$client$get.data;\n          return _context.abrupt(\"return\", {\n            order: data\n          });\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default OrderShow;","map":null,"metadata":{},"sourceType":"module"}